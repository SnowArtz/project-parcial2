{
	"info": {
		"_postman_id": "9ed306be-ac9e-4f4b-80da-1170b1b5996d",
		"name": "Profesor",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34997290"
	},
	"item": [
		{
			"name": "Add a profesor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que la creación de un profesor devuelva el código de estado 201 y que la respuesta incluya todas las propiedades esperadas.\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    // Esta prueba se eligió para asegurarse de que la operación de creación sea exitosa y devuelva el código correcto.\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all expected properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"profesor_id\", jsonData.id); // Guardar ID para uso posterior\r",
							"    // Esta prueba se eligió para verificar que la respuesta contenga todas las propiedades esperadas después de crear un profesor.\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"no_cedula\", 123456729);\r",
							"    pm.expect(jsonData).to.have.property(\"nombre\", \"Juan Perez\");\r",
							"    pm.expect(jsonData).to.have.property(\"grupo_investigacion\", \"TICSW\");\r",
							"    pm.expect(jsonData).to.have.property(\"no_extension\", 1234);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"no_cedula\": 123456729,\r\n  \"nombre\": \"Juan Perez\",\r\n  \"grupo_investigacion\": \"TICSW\",\r\n  \"no_extension\": 1234\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/profesores",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"profesores"
					]
				}
			},
			"response": [
				{
					"name": "Add a profesor",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"titulo\": \"Nueva Propuesta\",\r\n  \"descripcion\": \"Descripción de la propuesta\",\r\n  \"palabra_clave\": \"clave\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/profesores",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"profesores"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "141"
						},
						{
							"key": "ETag",
							"value": "W/\"8d-sN22kTakR2l/8qRTC40Zkw8jLU4\""
						},
						{
							"key": "Date",
							"value": "Mon, 27 May 2024 01:17:35 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": \"48a9ab90-1276-11ed-861d-0242ac120002\",\n  \"no_cedula\": 123456789,\n  \"nombre\": \"Juan Perez\",\n  \"grupo_investigacion\": \"TICSW\",\n  \"no_extension\": 1234\n}\n"
				}
			]
		},
		{
			"name": "Add a profesor 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que la creación de un profesor devuelva el código de estado 201 y que la respuesta incluya todas las propiedades esperadas.\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    // Esta prueba se eligió para asegurarse de que la operación de creación sea exitosa y devuelva el código correcto.\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all expected properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"profesor_id\", jsonData.id); // Guardar ID para uso posterior\r",
							"    // Esta prueba se eligió para verificar que la respuesta contenga todas las propiedades esperadas después de crear un profesor.\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"no_cedula\", 987654321);\r",
							"    pm.expect(jsonData).to.have.property(\"nombre\", \"Carlos Perez\");\r",
							"    pm.expect(jsonData).to.have.property(\"grupo_investigacion\", \"TICSW\");\r",
							"    pm.expect(jsonData).to.have.property(\"no_extension\", 1234);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"no_cedula\": 987654321,\r\n  \"nombre\": \"Carlos Perez\",\r\n  \"grupo_investigacion\": \"TICSW\",\r\n  \"no_extension\": 1234\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/profesores",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"profesores"
					]
				}
			},
			"response": [
				{
					"name": "Add a profesor",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"titulo\": \"Nueva Propuesta\",\r\n  \"descripcion\": \"Descripción de la propuesta\",\r\n  \"palabra_clave\": \"clave\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/profesores",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"profesores"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "141"
						},
						{
							"key": "ETag",
							"value": "W/\"8d-sN22kTakR2l/8qRTC40Zkw8jLU4\""
						},
						{
							"key": "Date",
							"value": "Mon, 27 May 2024 01:17:35 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": \"48a9ab90-1276-11ed-861d-0242ac120002\",\n  \"no_cedula\": 123456789,\n  \"nombre\": \"Juan Perez\",\n  \"grupo_investigacion\": \"TICSW\",\n  \"no_extension\": 1234\n}\n"
				}
			]
		},
		{
			"name": "Get one Profesor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que la obtención de un profesor por ID devuelva el código de estado 200 y que la respuesta incluya todas las propiedades esperadas.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    // Esta prueba se eligió para asegurarse de que la operación de obtención sea exitosa y devuelva el código correcto.\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all expected properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    // Esta prueba se eligió para verificar que la respuesta contenga todas las propiedades esperadas al obtener un profesor.\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"no_cedula\");\r",
							"    pm.expect(jsonData).to.have.property(\"nombre\");\r",
							"    pm.expect(jsonData).to.have.property(\"grupo_investigacion\");\r",
							"    pm.expect(jsonData).to.have.property(\"no_extension\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/profesores/{{profesor_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"profesores",
						"{{profesor_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get one Profesor",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/profesores/{{profesor_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"profesores",
								"{{profesor_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\r\n  \"id\": \"1e061964-1276-11ed-861d-0242ac120002\",\r\n  \"no_cedula\": 123456789,\r\n  \"nombre\": \"Juan Perez\",\r\n  \"grupo_investigacion\": \"TICSW\",\r\n  \"no_extension\": 1234\r\n}\r\n"
				}
			]
		},
		{
			"name": "Get an Invalid Profesor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que la obtención de un profesor inválido devuelva el código de estado 404 y un mensaje de error apropiado.\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    // Esta prueba se eligió para asegurarse de que la operación de obtención de un ID inválido maneje correctamente el error.\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    // Esta prueba se eligió para verificar que la respuesta contenga un mensaje de error adecuado cuando el profesor no se encuentra.\r",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 404);\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"The profesor with the given id was not found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/profesores/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"profesores",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": [
				{
					"name": "Get an invalid Profesor",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/profesores/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"profesores",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "ETag",
							"value": "W/\"4c-8aMTdU8H6SbgqhWya5JqLDyr1p4\""
						},
						{
							"key": "Date",
							"value": "Mon, 27 May 2024 01:49:34 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n  \"statusCode\": 404,\n  \"message\": \"The profesor with the given id was not found\"\n}\n"
				}
			]
		},
		{
			"name": "Delete a Profesor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que la eliminación de un profesor por ID devuelva el código de estado 204.\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    // Esta prueba se eligió para asegurarse de que la operación de eliminación sea exitosa y devuelva el código correcto.\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/profesores/{{profesor_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"profesores",
						"{{profesor_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a Profesor",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/profesores/{{profesor_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"profesores",
								"{{profesor_id}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "52"
						},
						{
							"key": "ETag",
							"value": "W/\"34-rlKccw1E+/fV8niQk4oFitDfPro\""
						},
						{
							"key": "Date",
							"value": "Mon, 27 May 2024 01:52:45 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete a Profesor Cedula",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que la eliminación de un profesor por cédula devuelva el código de estado 204.\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    // Esta prueba se eligió para asegurarse de que la operación de eliminación sea exitosa y devuelva el código correcto.\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/profesores/cedula/{{no_cedula}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"profesores",
						"cedula",
						"{{no_cedula}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a Profesor Cedula",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/profesores/cedula/{{cedula}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"profesores",
								"cedula",
								"{{cedula}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Date",
							"value": "Mon, 27 May 2024 02:29:36 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Delete an Invalid Profesor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que la eliminación de un profesor inválido devuelva el código de estado 404 y un mensaje de error apropiado.\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    // Esta prueba se eligió para asegurarse de que la operación de eliminación de un ID inválido maneje correctamente el error.\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    // Esta prueba se eligió para verificar que la respuesta contenga un mensaje de error adecuado cuando el profesor no se encuentra.\r",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 404);\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"The profesor with the given id was not found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/profesores/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"profesores",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": [
				{
					"name": "Delete an Invalid Profesor",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/profesores/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"profesores",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "ETag",
							"value": "W/\"4c-8aMTdU8H6SbgqhWya5JqLDyr1p4\""
						},
						{
							"key": "Date",
							"value": "Mon, 27 May 2024 01:53:37 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n  \"statusCode\": 404,\n  \"message\": \"The profesor with the given id was not found\"\n}\n"
				}
			]
		},
		{
			"name": "Delete an Invalid Profesor Cedula",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que la eliminación de un profesor inválido por cédula devuelva el código de estado 404 y un mensaje de error apropiado.\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    // Esta prueba se eligió para asegurarse de que la operación de eliminación de un ID inválido maneje correctamente el error.\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    // Esta prueba se eligió para verificar que la respuesta contenga un mensaje de error adecuado cuando el profesor no se encuentra.\r",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 404);\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"The profesor with the given no_cedula was not found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/profesores/cedula/00000000",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"profesores",
						"cedula",
						"00000000"
					]
				}
			},
			"response": [
				{
					"name": "Delete an Invalid Profesor Cedula",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/profesores/cedula/00000000",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"profesores",
								"cedula",
								"00000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "82"
						},
						{
							"key": "ETag",
							"value": "W/\"52-TH/hHG5/C3J9icLlOwZ9MvWR74c\""
						},
						{
							"key": "Date",
							"value": "Mon, 27 May 2024 02:29:57 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The profesor with the given no_cedula was not found\"\n}"
				}
			]
		}
	]
}